{"ast":null,"code":"var _jsxFileName = \"/home/fabio/Documents/projetos/Form React Redux/form-react-redux/src/components/Form.js\";\nimport React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport formAction from '../actions/FormActions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Form extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = (type, value, name, setName) => /*#__PURE__*/_jsxDEV(\"input\", {\n      type: type,\n      value: value,\n      name: name,\n      onChange: setName,\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }, this);\n  }\n\n  render() {\n    const {\n      name,\n      email,\n      CPF,\n      setName\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [this.renderInput('text', name, 'name', setName), this.renderInput('text', email, 'email', setName), this.renderInput('text', CPF, 'cpf', setName), /*#__PURE__*/_jsxDEV(\"button\", {\n          ty: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  name: state.formReducer.name,\n  email: state.formReducer.email,\n  CPF: state.formReducer.CPF\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setName: ({\n    target: {\n      value,\n      name\n    }\n  }) => dispatch(formAction(value, name))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","map":{"version":3,"sources":["/home/fabio/Documents/projetos/Form React Redux/form-react-redux/src/components/Form.js"],"names":["React","Component","Fragment","connect","formAction","Form","renderInput","type","value","name","setName","render","email","CPF","props","mapStateToProps","state","formReducer","mapDispatchToProps","dispatch","target"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;;;AAEA,MAAMC,IAAN,SAAmBJ,SAAnB,CAA6B;AAAA;AAAA;;AAAA,SAC3BK,WAD2B,GACb,CAACC,IAAD,EAAOC,KAAP,EAAcC,IAAd,EAAoBC,OAApB,kBACZ;AACA,MAAA,IAAI,EAAGH,IADP;AAEA,MAAA,KAAK,EAAGC,KAFR;AAGA,MAAA,IAAI,EAAGC,IAHP;AAIA,MAAA,QAAQ,EAAGC,OAJX;AAKA,MAAA,QAAQ;AALR;AAAA;AAAA;AAAA;AAAA,YAFyB;AAAA;;AAW3BC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEF,MAAAA,IAAF;AAAQG,MAAAA,KAAR;AAAeC,MAAAA,GAAf;AAAoBH,MAAAA;AAApB,QAAgC,KAAKI,KAA3C;AACA,wBACE,QAAC,QAAD;AAAA,6BACE;AAAA,mBACI,KAAKR,WAAL,CAAiB,MAAjB,EAAyBG,IAAzB,EAA+B,MAA/B,EAAuCC,OAAvC,CADJ,EAEI,KAAKJ,WAAL,CAAiB,MAAjB,EAAyBM,KAAzB,EAAgC,OAAhC,EAAyCF,OAAzC,CAFJ,EAGI,KAAKJ,WAAL,CAAiB,MAAjB,EAAyBO,GAAzB,EAA8B,KAA9B,EAAqCH,OAArC,CAHJ,eAIE;AAAQ,UAAA,EAAE;AAAV;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAvB0B;;AA0B7B,MAAMK,eAAe,GAAIC,KAAD,KAAY;AAClCP,EAAAA,IAAI,EAAEO,KAAK,CAACC,WAAN,CAAkBR,IADU;AAElCG,EAAAA,KAAK,EAAEI,KAAK,CAACC,WAAN,CAAkBL,KAFS;AAGlCC,EAAAA,GAAG,EAAEG,KAAK,CAACC,WAAN,CAAkBJ;AAHW,CAAZ,CAAxB;;AAMA,MAAMK,kBAAkB,GAAIC,QAAD,KAAe;AACxCT,EAAAA,OAAO,EAAE,CAAC;AAAEU,IAAAA,MAAM,EAAE;AAAEZ,MAAAA,KAAF;AAASC,MAAAA;AAAT;AAAV,GAAD,KAAiCU,QAAQ,CAChDf,UAAU,CAACI,KAAD,EAAQC,IAAR,CADsC;AADV,CAAf,CAA3B;;AAMA,eAAeN,OAAO,CAAEY,eAAF,EAAmBG,kBAAnB,CAAP,CAA8Cb,IAA9C,CAAf","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport formAction from '../actions/FormActions'\n\nclass Form extends Component {\n  renderInput = (type, value, name, setName ) => (\n    <input\n    type={ type }\n    value={ value }\n    name={ name }\n    onChange={ setName }\n    required\n    />\n  )\n\n  render() {\n    const { name, email, CPF, setName } = this.props;\n    return (\n      <Fragment>\n        <form>\n          { this.renderInput('text', name, 'name', setName) }\n          { this.renderInput('text', email, 'email', setName) }\n          { this.renderInput('text', CPF, 'cpf', setName) }\n          <button ty></button>\n        </form>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.formReducer.name,\n  email: state.formReducer.email,\n  CPF: state.formReducer.CPF,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  setName: ({ target: { value, name } }) => dispatch(\n    formAction(value, name),\n  ),\n});\n\nexport default connect (mapStateToProps, mapDispatchToProps)(Form);"]},"metadata":{},"sourceType":"module"}